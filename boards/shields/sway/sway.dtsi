/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/matrix_transform.h>

&pro_micro_spi {
    status = "okay";
    cs-gpios = <&pro_micro 10 GPIO_ACTIVE_LOW>;

    glidepoint: glidepoint@0 {
        compatible = "cirque,pinnacle";
        reg = <0>;
        spi-max-frequency = <1000000>;
        status = "okay";
        dr-gpios = <&pro_micro 7 (GPIO_ACTIVE_HIGH)>;

        sensitivity = "4x";
        sleep;
        no-taps;
    };
};

/ { 
    glidepoint_listener: glidepoint_listener {
        compatible = "zmk,input-listener";
        status = "disabled";
    };

    kscan0: kscan0 {
        compatible = "zmk,kscan-gpio-matrix";
        diode-direction = "col2row";
        wakeup-source;

   // cirque
    // &pro_micro 10 SS/CS

    // &pro_micro 14 MISO/SO
    // &pro_micro 16 MOSI/SI
    // &pro_micro 7  DR


    row-gpios
        = <&pro_micro 21 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&pro_micro 20 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&pro_micro 19 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        , <&pro_micro 18 (GPIO_ACTIVE_HIGH | GPIO_PULL_DOWN)>
        ;

    col-gpios
        = <&pro_micro  0 GPIO_ACTIVE_HIGH>
        , <&pro_micro  4 GPIO_ACTIVE_HIGH>
        , <&pro_micro  5 GPIO_ACTIVE_HIGH>
        , <&pro_micro  6 GPIO_ACTIVE_HIGH>
        , <&pro_micro  7 GPIO_ACTIVE_HIGH>
        ;

    };
    physical_layout0: physical_layout_0 { // First physical layout, use different naming for other layouts
        compatible = "zmk,physical-layout";
        display-name = "Default Layout";
        kscan = <&kscan0>; // Label of the kscan node, optional if all layouts use the same
        transform = <&default_transform>; // Label of the matrix transform for this layout
    };

    chosen {
        zmk,physical-layout = &physical_layout0;
        // Other chosen items
    };

    default_transform: keymap_transform_0 {
        compatible = "zmk,matrix-transform";
        columns = <10>;
        rows = <4>;
        map = <

            RC(0,0) RC(0,1) RC(0,2) RC(0,3) RC(0,4)                     RC(0,9) RC(0,8) RC(0,7) RC(0,6) RC(0,5)
            RC(1,0) RC(1,1) RC(1,2) RC(1,3) RC(1,4)                     RC(1,9) RC(1,8) RC(1,7) RC(1,6) RC(1,5)
            RC(2,0) RC(2,1) RC(2,2) RC(2,3) RC(2,4) RC(3,4)     RC(3,9) RC(2,9) RC(2,8) RC(2,7) RC(2,6) RC(2,5)
                            RC(3,1) RC(3,2) RC(3,3)                     RC(3,8) RC(3,7) RC(3,6)
        >;
    };

    left_encoder1: left_encoder {
        compatible = "alps,ec11";
        // higher number means more scrolling
        steps = <3>; 
        status = "disabled";
    };

    right_encoder1: right_encoder1 {
        compatible = "alps,ec11";
        // higher number means more scrolling
        steps = <3>; 
        status = "disabled";
    };

    sensors: sensors {
        compatible = "zmk,keymap-sensors";
        sensors = <&left_encoder1 &right_encoder1>;
        triggers-per-rotation = <1>;
    };
};
